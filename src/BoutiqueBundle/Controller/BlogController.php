<?php

namespace BoutiqueBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\Validator\Constraints\Date;
use BoutiqueBundle\Entity\Article;
use BoutiqueBundle\Entity\CategorieBlog;
use BoutiqueBundle\Entity\Commentaire;
use BoutiqueBundle\Entity\Note;
use BoutiqueBundle\Entity\User;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use BoutiqueBundle\Form\ArticleType;
use BoutiqueBundle\Form\CategorieBlogType;
use BoutiqueBundle\Form\CommentaireType;
use userBundle\Form\RegistrationFormType;
use BoutiqueBundle\Form\UpdateCommType;
use BoutiqueBundle\Form\BoutiqueFormType;
use BoutiqueBundle\BoutiqueBundle;


class BlogController extends Controller
{
    public function indexAction()
    {

        return $this->render('@BoutiqueBundle/Default/indexAdmin.html.twig');
    }


    public function indexClientAction()
    {
        return $this->render('@Boutique/Default/indexClient.html.twig');
    }

    public function AffichePage1Action()
    {
        return $this->render('@Boutique/Blog/page1.html.twig');
    }

    public function AfficheBlogAction()
    {
        $em = $this->getDoctrine()->getManager();

        $Article = $em->getRepository("BoutiqueBundle:Article")->findAll();
        $categorie  = $em->getRepository("BoutiqueBundle:CategorieBlog")->findAll();
        return $this->render("@Boutique/Blog/Blog.html.twig",
            array('Article' => $Article,'cate'=>$categorie));
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function addArticleAction(Request $request)
    {
        $user = $this->getUser();

        $Article = new Article();
        $Article->setDateCreationArticle(new \DateTime());
        $form = $this->createForm(ArticleType::class, $Article);
        $form->handleRequest($request);
        if ($form->isSubmitted() && ($form->isValid())) {
            $file = $Article->getPhoto();

            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();


            // Move the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('image_directory'),
                $fileName
            );

            // Update the 'brochure' property to store the PDF file name
            // instead of its contents
            $Article->setPhoto($fileName);
            // $Article->setUserArt($this->getUserArt());
            $em = $this->getDoctrine()->getManager();
            $Article->setUserArt($user);
            $em->persist($Article);
            $em->flush();
            return $this->redirectToRoute('Affiche_Blog');
        }
        return $this->render("BoutiqueBundle:Blog:AjoutArticle.html.twig",
            array('form' => $form->createView()));
    }

    function AfficheArticleAction(Request $request)
    {
        $user = $this->getUser();

        $em = $this->getDoctrine()->getManager();

        $Article = $em->getRepository(Article::class)->triarticle();

        //  $categ= $em->getRepository("userBundle:Categorie")->findAll();
        if ($request->isMethod('POST')) {
            {
                $id = $request->get('id');

                $Article = $em->getRepository("BoutiqueBundle:Article")
                    ->findBy(array("id" => $id));
               // $this->redirectToRoute('Affiche_Blog');

            }
            return $this->render("@Boutique/Blog/Blog.html.twig");

        }
    }


    function supprimerCommentaireAction($id)

    {

        $em = $this->getDoctrine()->getManager();
        $modele = $em->getRepository("BoutiqueBundle:Commentaire")->find($id);
        $em->remove($modele);
        $em->flush();
        return $this->redirectToRoute('AfficheComm');

    }

    function supprimerCategorieAction($id)

    {

        $em = $this->getDoctrine()->getManager();
        $categ = $em->getRepository("BoutiqueBundle:CategorieBlog")->find($id);
        $em->remove($categ);
        $em->flush();
        return $this->redirectToRoute('AfficheCateg');

    }



    function ajouterCommentaireAction(Request $request)

    {
        $user = $this->getUser();
        $em = $this->getDoctrine()->getManager();
       $commentaires = $em->getRepository("BoutiqueBundle:Commentaire")->findAll();
        $commentaire = new Commentaire();
        $form = $this->createForm(CommentaireType::class, $commentaire);
        $form = $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            //ajout dans la base
            $commentaire->setCommentaireUser($user);
            $commentaire->setDateCreationComm(new \DateTime('now'));
            $em = $this->getDoctrine()->getManager();
            $em->persist($commentaire);
            $em->flush();
          return $this->redirectToRoute('AfficheComm');


            // return $this->render(' @user\Blog\ajoutComm.html.twig', array('commentaires' => $commentaires));
        }
       // return $this->render(' @user\Blog\ajoutComm.html.twig', array('commentaires' => $commentaires));
      return $this->render('@Boutique\Blog\ajoutComm.html.twig', array('f' => $form->createView(), array('voitures' => $commentaire)));


    }

    function ajouterCategAction(Request $request)

    {

        $categorie = new CategorieBlog();
        $form = $this->createForm(CategorieBlogType::class, $categorie);
        $form = $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            //ajout dans la base
            $em = $this->getDoctrine()->getManager();
            $em->persist($categorie);
            $em->flush();
            return $this->redirectToRoute('AfficheCateg');
        }
        return $this->render('@Boutique\Blog\CrudCategorieAdmin.html.twig', array('f' => $form->createView()));


    }

    function afficheCommentaireAction(Request $request)
    {


        $em = $this->getDoctrine()->getManager();
        $commentaires = $em->getRepository("BoutiqueBundle:Commentaire")->findAll();
        $Article = $em->getRepository("BoutiqueBundle:Article");

        // $this->redirectToRoute('AfficheArticle');

        // $Article = $em->getRepository("userBundle:Article")->findAll();

        $commentaires  = $this->get('knp_paginator')->paginate(
            $commentaires,
            $request->query->get('page', 1),3);

        return $this->render('@Boutique\Blog\affiche.html.twig', array('commentaires' => $commentaires, 'Article'
        => $Article));
    }

    /* function supprimerCommentaireAction($id)

     {

         $em = $this->getDoctrine()->getManager();
         $modele = $em->getRepository("BoutiqueBundle:Commentaire")->find($id);
         $em->remove($modele);
         $em->flush();
         return $this->redirectToRoute('AfficheComm');

     }

 */
    /**
     * @param Request $request
     * @return Response
     */
    public function noterAction(Request $request)
    {
        $em = $this->getDoctrine()->getManager();

        if ($request->isXmlHttpRequest()) {
            $client = $this->container->get('security.token_storage')->getToken()->getUser();
            $article = $em->getRepository('BoutiqueBundle:Article')->find($request->get('id_article'));
            $note = $em->getRepository('BoutiqueBundle:Note')->findOneBy(['noteuser' => $client, 'noteart' => $article]);

            if ($note) {
                $note->setNombreNote($request->get('noteart'));
                $em->persist($note);
                $em->flush();
                $response = new Response(json_encode(array('note' => $note->getNombreNote()
                )));

            }
            if (!$note) {
                $note = new Note();
                $note->setNoteart($article);
                $note->setNoteuser($client);
                $note->setNombreNote($request->get('noteart'));
                $em->persist($note);
                $em->flush();

                $response = new Response(json_encode(array('note' => $note->getNombreNote()
                )));

            }
        }

        $response->headers->set('Content-Type', 'application/json');
        return $response;


    }

    function modifierCommAction(Request $request, $id)

    {

        $comm = $this->getDoctrine()->getRepository(Commentaire::class)->find($id);
        $form = $this->createForm(UpdateCommType::class, $comm);
        $form = $form->handleRequest($request);
        if ($form->isValid()) {
            //ajout dans la base

            $em = $this->getDoctrine()->getManager();

            $em->flush();
            return $this->redirectToRoute('AfficheComm');

        }
        $form = $form->createView();
        return $this->render('@Boutique\Blog\updateComm.html.twig', array('f' => $form));

    }

    public function updateAction(Request $request)
    {
        $id = $request->get('id');
        $em = $this->getDoctrine()->getManager();
        $Article = $em->getRepository("BoutiqueBundle:Article")->find($id);
        $form = $this->createForm(ArticleType::class, $Article);
        $Article->setPhoto(
            new File($this->getParameter('image_directory') . '/' . $Article->getPhoto())

        );

        $form->handleRequest($request);
        if ($form->isValid()) {
            $file = $Article->getPhoto();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            $file->move(
                $this->getParameter('image_directory'),
                $fileName
            );
            $Article->setPhoto($fileName);
            $em->persist($Article);
            $em->flush();
            return $this->redirectToRoute('AfficheArticle');

        }
        return $this->render("BoutiqueBundle:Blog:update.html.twig", array("form" => $form->createView()));
    }


    /*public function findcommartAction($category)
    {
        $user = $this->getUser();
        $em = $this->getDoctrine()->getManager();
        $posts = $em->getRepository('userBundle:Post')->findByCategory($category);
        $postcount = $em->getRepository('userBundle:Post')->findNumberOfPostsByCategory($category)['number'];
        return $this->render('userBundle:Forum:viewforum.html.twig',array('category'=>$category,'user'=>$user,
            'posts'=>$posts,'postcount'=>$postcount));
    }
   */


    public function AfficheArticleadminAction(){

        $em = $this->getDoctrine()->getManager();
        $articles =  $em->getRepository("BoutiqueBundle:Article")->findAll();

        return $this->render('@Boutique\Blog\artParCateg.html.twig', array('articles'=>$articles));


    }
  /*  public function detailsartAction(Request $request , $id)
    {


        $em = $this->getDoctrine()->getManager();

        $commentaires = $em->getRepository("BoutiqueBundle:Commentaire")->find($id);
        $Article = $em->getRepository("BoutiqueBundle:Article")->find($id);
        //  $categ= $em->getRepository("userBundle:Categorie")->findAll();

        //   $Article = $em->getRepository("userBundle:Article")
        //     ->find($id);
        // $this->redirectToRoute('details_Article');
        return $this->render('@Boutique\Blog\affiche_detalis_art.html.twig', array('commentaires' => $commentaires, 'Article'
        => $Article));
    }


*/


/*
     //$user = $this->getUser();

     $em = $this->getDoctrine()->getManager();

    // $Article = $em->getRepository("userBundle:Article")->find($id);
     //  $categ= $em->getRepository("userBundle:Categorie")->findAll();
     if ($request->isMethod('POST')) {
         {
             $id = $request->get('id');

             $Article = $em->getRepository("userBundle:Article")->findAll();
            $this->redirectToRoute('details_Article');

         }
         return $this->render('@user\Blog\affiche_detalis_art.html.twig', array('Article'
         => $Article));
     }
 }
}

*/

   public function afficheCategAction(){

       $em = $this->getDoctrine()->getManager();
       $categ =  $em->getRepository("BoutiqueBundle:CategorieBlog")->findAll();

       return $this->render('@Boutique\Blog\afficheCateg.html.twig', array('categ'=>$categ));


   }

   public function statAction()
   {
       $em = $this->getDoctrine()->getManager();
       $articles= $em->getRepository("BoutiqueBundle:Article")->bestevents();

     /*  $chart = new \CMEN\GoogleChartsBundle\GoogleCharts\Charts\Material\BarChart();
       $chart->getData()->setArrayToDataTable([
           ['Article', 'note'],
           [$articles[0]['nom'],$articles[0]['note']],
           [$articles[1]['nom'],$articles[1]['note']],
           [$articles[2]['nom'],$articles[2]['note']],
           [$articles[3]['nom'],$articles[3]['note']],
           [$articles[4]['nom'],$articles[4]['note']],

           ]);

       $chart->getOptions()->getChart()
           ->setTitle('Meilleurs articles');
       $chart->getOptions()
           ->setHeight(400)
           ->setWidth(900)
           ->setSeries([['axis' => 'Note']])
           ->setAxes(['x' => [
               'Note' => ['label' => 'Note']
               ]
           ]);
*/
       $chart = new \CMEN\GoogleChartsBundle\GoogleCharts\Charts\Material\BarChart();
       $chart->getData()->setArrayToDataTable([
           ['Article', 'note'],
           [$articles[4]['nom'], $articles[4]['note']],
           [$articles[3]['nom'], $articles[3]['note']],
           [$articles[2]['nom'], $articles[2]['note']],
           [$articles[1]['nom'], $articles[1]['note']],
           [$articles[0]['nom'], $articles[0]['note']]
       ]);

       $chart->getOptions()->getChart()
           ->setTitle('Nearby galaxies')
           ->setSubtitle('distance on the left, brightness on the right');
       $chart->getOptions()
           ->setHeight(400)
           ->setWidth(900)
           ->setSeries([['axis' => 'Note']])
           ->setAxes(['x' => [
               'Note' => ['label' => 'Note']]
           ]);
       return $this->render('@Boutique\Blog\stat.html.twig', array('chart'=>$chart));

   }
}


